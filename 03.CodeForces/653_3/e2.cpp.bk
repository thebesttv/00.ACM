#include<iostream>
#include<cstdio>
#include<cstdlib>
#include<cstring>
#include<climits>
#include<cmath>
#include<ctime>
#include<vector>
#include<queue>
#include<stack>
#include<list>
#include<set>
#include<map>
#include<utility>
#include<algorithm>
using namespace std;

#define FOR(i,a,b) for(register int i=(a);i<(b);++i)
#define FORR(i,a,b) for(register int i=(a);i<=(b);++i)
#define ROR(i,a,b) for(register int i=(a);i>=(b);--i)
#define RORR(i,a,b) for(register int i=(a);i>(b);--i)
#define PQ priority_queue
#define VR vector
#define MST(a,b) memset(a,b,sizeof(a))
#define FGETS(s) fgets(s,sizeof(s),stdin)
#define ALL(x) x.begin(),x.end()
#define INS(x) inserter(x,x.begin())
#define FI first
#define SE second
typedef long long LL;
typedef long long unsigned LLU;
typedef pair<int,int> pii;

int n,m,k;
const LL INF = 0x3f3f3f3f3f3f3f3f;
VR<int> a,b,c,d,e,ans;
struct Node{
  int t,a,b;
}node[int(2e5+20)];

const int MAX = 1e4 + 20;
struct ST{
  int cnt[MAX<<2],v[MAX<<2], n;
  void add(int x, int v) {
#ifdef DEBUG
    printf("  add %d\n",x);
#endif
    return add(1,1,n,x,v);
  }
  void add(int u, int l, int r, int x, int val){
    if(val>0) ++cnt[u], v[u] += x;
    else      --cnt[u], v[u] -= x;

    if(l == r) return;
    int m = (l+r)/2;
    if(x <= m) add(u<<1,l,m,x,val);
    else add(u<<1|1,m+1,r,x,val);
  }

  int qMin(int k) {
#ifdef DEBUG
    printf("  qMin(%d): %d\n",k,qMin(1,1,n,k));
#endif
    return qMin(1,1,n,k);
  }
  int qMin(int u, int l, int r, int k){
    if(!k) return 0;
    if(k >= cnt[u]) return v[u];
    int m = (l+r)/2;

    int sum = qMin(u<<1, l, m, min(k, cnt[u<<1]));
    if(cnt[u<<1] < k) sum += qMin(u<<1|1, m+1, r, k - cnt[u<<1]);
    return sum;
  }
}sg;

void cal1(LL rec){
  VR<pii> v1, v2;
  FOR(i,0,n){
    if(node[i].a && node[i].b) v1.push_back({node[i].t,i+1});
    else v2.push_back({node[i].t, i+1});
  }
  sort(ALL(v1)); sort(ALL(v2));
  FOR(i,0,rec) ans.push_back(v1[i].SE);
  FOR(i,0,m-rec) ans.push_back(v2[i].SE);
}

void cal2(LL rec){
#ifdef DEBUG
  printf("cal2 %lld\n",rec);
#endif
  VR<pii> c, a, b, left;
  FOR(i,0,n){
    Node &t = node[i];
    if(t.a && t.b) c.push_back({t.t, i+1});
    else if(t.a) a.push_back({t.t, i+1});
    else if(t.b) b.push_back({t.t, i+1});
    else left.push_back({t.t, i+1});
  }

  sort(ALL(a)); sort(ALL(b)); sort(ALL(c));
  FOR(i,0,rec) ans.push_back(c[i].SE);
  FOR(i,0,k-rec) ans.push_back(a[i].SE);
  FOR(i,0,k-rec) ans.push_back(b[i].SE);

  int nleft = m - (rec + k-rec + k-rec);
  FOR(i,k-rec,a.size()) left.push_back(a[i]);
  FOR(i,k-rec,b.size()) left.push_back(b[i]);
#ifdef DEBUG
  printf("  nleft: %d\n",nleft);
  for(auto p : left) printf(" [%d, %d]\n",p.FI,p.SE);
#endif
  sort(ALL(left));
  FOR(i,0,nleft) ans.push_back(left[i].SE);
}

int main(void){
  scanf("%d%d%d",&n,&m,&k);
  FOR(i,0,n){
    int t,ta,tb;
    scanf("%d%d%d",&t,&ta,&tb);
    node[i] = {t,ta,tb};

    if(ta && tb) c.push_back(t);
    else{
      d.push_back(t);
      if(ta) a.push_back(t);
      else if(tb) b.push_back(t);
      else e.push_back(t);
    }
  }
  sort(ALL(a)); sort(ALL(b)); sort(ALL(c)); sort(ALL(d)); sort(ALL(e));
#ifdef DEBUG
  printf("a:"); for(int x : a) printf(" %d",x); putchar('\n');
  printf("b:"); for(int x : b) printf(" %d",x); putchar('\n');
  printf("c:"); for(int x : c) printf(" %d",x); putchar('\n');
  printf("d:"); for(int x : d) printf(" %d",x); putchar('\n');
  printf("e:"); for(int x : e) printf(" %d",x); putchar('\n');
#endif

  VR<int> sa(a), sb(b), sc(c);
  FOR(i,1,a.size()) sa[i] += sa[i-1];
  FOR(i,1,b.size()) sb[i] += sb[i-1];
  FOR(i,1,c.size()) sc[i] += sc[i-1];
  FOR(i,1,d.size()) d[i] += d[i-1];
  FOR(i,1,e.size()) e[i] += e[i-1];

  LL ansMin = INF, rec = -1; sg.n = 1e4;
  if(c.size() >= k) FORR(i,k,min((int)c.size(),m)){
    LL sum = sc[i-1];
    if(i != m){
      if(d.size() < m-i) sum = INF;
      else sum += d[m-i-1];
    }
    if(sum < ansMin){
#ifdef DEBUG
      printf("c: %d, sum: %lld\n",i,sum);
#endif
      ansMin = sum; rec = i | (1ll<<60);
    }
  }

  bool first = true;
  for(int x : e) sg.add(x,1);
  FORR(i,0,min((int)c.size(), k-1)) if(a.size() >= k-i && b.size() >= k-i){
    int left = m - (i + k-i + k-i);
    if(left < 0) continue;

    if(first){
      FOR(j,k-i,a.size()) sg.add(a[j],1);
      FOR(j,k-i,b.size()) sg.add(b[j],1);
      first = false;
    }

    LL sum = i>0 ? sc[i-1] : 0;
    sum += sa[k-i-1] + sb[k-i-1] + sg.qMin(left);
    if(sum < ansMin){
#ifdef DEBUG
      printf("c: %d, sum: %lld\n",i,sum);
#endif
      ansMin = sum; rec = i;
    }

    sg.add(a[k-i-1],1), sg.add(b[k-i-1],1);
  }

  if(ansMin == INF) { printf("-1\n"); return 0; }
  if(rec & (1ll<<60)) cal1(rec - (1ll<<60));
  else cal2(rec);

  printf("%lld\n",ansMin);
  for(int x : ans) printf("%d ",x);
  putchar('\n');

  return 0;
}
